version: "3.4"

services:

  localstack:
    container_name: aws-stack
    image: localstack/localstack
    ports:
      - "4566:4566"
    environment:
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_DEFAULT_OUTPUT=json
      - SERVICES=sqs,cloudwatch
    volumes:
      - ./cloudformation/template:/cloudformation/template
      - ./local/aws:/etc/localstack/init/ready.d
#      - ./var/run/docker.sock:/var/run/docker.sock

  flyway:
    image: flyway/flyway:7.14-alpine
    container_name: digital-account-flyway
    command: -url=jdbc:postgresql://postgres:5432/digital-account-service -schemas=digital_account_service -user=digital-account-service-migration -password=digital-account-service-migration migrate
    volumes:
      - ./src/main/resources/db/migration:/flyway/sql
    depends_on:
      - postgres

  postgres:
    image: postgres
    container_name: digital-account-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: sonartest
      POSTGRES_PASSWORD: "mM@md38d23"
    volumes:
      - ./local/setup-postgresql-databases.sh:/docker-entrypoint-initdb.d/setup-postgresql-databases.sh
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-container
    networks:
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-container
    networks:
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  redis:
    image: redis:6.2-alpine
    container_name: redis-service
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - cache:/data

#  kafdrop:
#    image: obsidiandynamics/kafdrop:latest
#    container_name: kafdrop-container
#    networks:
#      - broker-kafka
#    depends_on:
#      - kafka
#    ports:
#      - 19000:9000
#    environment:
#      KAFKA_BROKERCONNECT: kafka:29092

#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus-container
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#      - prometheus_data:/prometheus
#    networks:
#      - prometheus
#    ports:
#      - "9090:9090"

#  grafana:
#    image: grafana/grafana:latest
#    container_name: grafana-container
#    ports:
#      - "3000:3000"
#    networks:
#      - prometheus
#    volumes:
#      - ./grafana/provisioning:/etc/grafana/provisioning
#      - grafana_data:/var/lib/grafana

#  fake-service:
#    image: mockoon/cli:1.5.1
#    container_name: fake-service
#    ports:
#      - "3001:3001"
#    command: -d /data -i 0 -p 3001
#    volumes:
#      - ./local/mockoon/data.json:/data

#  influxdb:
#    image: influxdb:1.8
#    networks:
#      - k6
#      - grafana
#    ports:
#      - "8086:8086"
#    environment:
#     - INFLUXDB_DB=k6

#  k6:
#    image: loadimpact/k6:latest
#    networks:
#      - k6
#    ports:
#      - "6565:6565"
#    environment:
#      - K6_OUT=influxdb=http://influxdb:8086/k6
#    volumes:
#     - ./loadtest/scripts:/scripts
#    extra_hosts:
#      - "host.docker.internal:host-gateway"

#  web:
#    image: 'gitlab/gitlab-ce:latest'
#    restart: always
#    hostname: 'localhost'
#    container_name: gitlab-ce
#    environment:
#      GITLAB_OMNIBUS_CONFIG: |
#        external_url 'http://localhost'
#    ports:
#      - '8080:80'
#      - '8443:443'
#      - '24:24'
#    volumes:
#      - '$GITLAB_HOME/config:/etc/gitlab'
#      - '$GITLAB_HOME/logs:/var/log/gitlab'
#      - '$GITLAB_HOME/data:/var/opt/gitlab'

#  gitlab-runner:
#    image: gitlab/gitlab-runner:alpine
#    container_name: gitlab-runner
#    restart: always
#    depends_on:
#      - web
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - '$GITLAB_HOME/gitlab-runner:/etc/gitlab-runner'

#  sonarqube:
#    image: sonarqube:9.9.1-community
#    container_name: sonar-service
#    depends_on:
#      - postgres
#    environment:
#      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/digital-account-service
#      SONAR_JDBC_USERNAME: digital-account-service-app
#      SONAR_JDBC_PASSWORD: digital-account-service-app
#    volumes:
#      - SonarQube_data:/opt/SonarQube/data
#      - SonarQube_extensions:/opt/SonarQube/extensions
#      - SonarQube_logs:/opt/SonarQube/logs
#    ports:
#      - "9000:9000"

networks:
  k6:
  grafana:
  gitlab:
  prometheus:
    driver: bridge
  broker-kafka:
    driver: bridge

volumes:
  cache:
    driver: local
  postgresql:
  postgresql_data:
  prometheus_data:
  grafana_data: