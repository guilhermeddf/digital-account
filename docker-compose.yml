version: "3.4"

services:

#  digital-account:
#    image: digital-account-app
#    environment:
#      - Dspring.profiles.active=docker
#    labels:
#      #com.datadoghq.ad.check_names: '[""]'
#      com.datadoghq.ad.init_configs: '[{}]'
#      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port": "%%port%%"}]'
#      com.datadoghq.ad.logs: '[{"source": "digital-account", "service": "digital-account"}]'
#      com.datadoghq.tags.env: 'local'
#      com.datadoghq.tags.service: 'digital-account'
#      com.datadoghq.tags.version: "1"
#    ports:
#      - "8080:8080"
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "30m"
#        max-file: "1"

  localstack:
    container_name: aws-container
    image: localstack/localstack
    ports:
      - "4566:4566"
    environment:
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_DEFAULT_OUTPUT=json
      - SERVICES=sqs,cloudwatch
    volumes:
      - ./configuration/cloudformation/template:/cloudformation/template
      - ./configuration/aws:/etc/localstack/init/ready.d
      - ./var/run/docker.sock:/var/run/docker.sock


  flyway:
    image: flyway/flyway:7.14-alpine
    container_name: flyway-container
    command: -url=jdbc:postgresql://postgres:5432/digital-account-service -schemas=digital_account_service -user=digital-account-service-migration -password=digital-account-service-migration migrate
    volumes:
      - ./application/src/main/resources/migration:/flyway/sql
    depends_on:
      - postgres

  postgres:
    image: postgres
    container_name: postgres-container
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: "mM@md38d23"
    volumes:
      - ./configuration/postgresql/setup-postgresql-databases.sh:/docker-entrypoint-initdb.d/setup-postgresql-databases.sh
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

#  datadog:
#    image: gcr.io/datadoghq/agent:7
#    container_name: dd-agent
#    restart: always
#    environment:
#      - DD_API_KEY=apikey
#      - DD_SITE=us5.datadoghq.com
#      - DD_HOSTNAME=localhost
#      - DD_APM_ENABLED=true
#      - DD_LOGS_ENABLED=true
#      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
#      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
#      - DD_CONTAINER_EXCLUDE=image:gcr.io/datadoghq/agent*
#      - DD_CONTAINER_EXCLUDE_METRICS=image:gcr.io/datadoghq/agent*
#      - DD_CONTAINER_EXCLUDE_LOGS=image:gcr.io/datadoghq/agent*
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - /proc/:/host/proc/:ro
#      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
#      #- /opt/datadog-agent/run:/opt/datadog-agent/run:rw

#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    container_name: zookeeper-container
#    networks:
#      - broker-kafka
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000

#  kafka:
#    image: confluentinc/cp-kafka:latest
#    container_name: kafka-container
#    networks:
#      - broker-kafka
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

#  redis:
#    image: redis:6.2-alpine
#    container_name: redis-service
#    restart: always
#    ports:
#      - '6379:6379'
#    command: redis-server --save 20 1 --loglevel warning
#    volumes:
#      - cache:/data

#  kafdrop:
#    image: obsidiandynamics/kafdrop:latest
#    container_name: kafdrop-container
#    networks:
#      - broker-kafka
#    depends_on:
#      - kafka
#    ports:
#      - 19000:9000
#    environment:
#      KAFKA_BROKERCONNECT: kafka:29092

#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus-container
#    volumes:
#      - ./configuration/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#      - prometheus_data:/prometheus
#    networks:
#      - prometheus
#    ports:
#      - "9090:9090"

#  grafana:
#    image: grafana/grafana:latest
#    container_name: grafana-container
#    ports:
#      - "3000:3000"
#    networks:
#      - prometheus
#    volumes:
#      - ./configuration/grafana/provisioning:/etc/grafana/provisioning
#      - grafana_data:/var/lib/grafana

#  fake-service:
#    image: mockoon/cli:1.5.1
#    container_name: fake-service
#    ports:
#      - "3001:3001"
#    command: -d /data -i 0 -p 3001
#    volumes:
#      - ./configuration/mockoon/data.json:/data

#  influxdb:
#    image: influxdb:1.8
#    networks:
#      - k6
#      - grafana
#    ports:
#      - "8086:8086"
#    environment:
#     - INFLUXDB_DB=k6

#  k6:
#    image: loadimpact/k6:latest
#    networks:
#      - k6
#    ports:
#      - "6565:6565"
#    environment:
#      - K6_OUT=influxdb=http://influxdb:8086/k6
#    volumes:
#     - ./configuration/k6:/scripts
#    extra_hosts:
#      - "host.docker.internal:host-gateway"

networks:
  k6:
  grafana:
  prometheus:
    driver: bridge
  broker-kafka:
    driver: bridge

volumes:
  cache:
    driver: local
  postgresql:
  postgresql_data:
  prometheus_data:
  grafana_data:

#https://github.com/rbailen/Hexagonal-Architecture
#https://github.com/wesleyosantos91/poc-multi-module-arch-hexagonal-springboot
#https://github.com/gisiona/apirest-with-java-springboot-arquitetura-hexagonal
#https://github.com/MarioJunio/base-spring-cloud
#https://betterprogramming.pub/hexagonal-architecture-with-spring-boot-74e93030eba3
