AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample Cloudformation

Parameters:
  Env:
    Type: String
    AllowedValues:
      - localstack
      - dev
      - hml
      - prd
    Default: localstack

  Service:
    Type: String
    Default: sample-service

  Version:
    Type: String

Resources:
  SampleS3Storage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: sample-bucket

  SampleDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'sample-table'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: 'HASH'

  SampleSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: sample-queue
  
  SampleSecretsManager:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Name: sample-secret-manager
      SecretString: '{\"password\":\"xyz\"}'

#  LambdaFunctionRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#        - Effect: Allow
#          Principal:
#            Service:
#              - lambda.amazonaws.com
#          Action:
#            - sts:AssumeRole
#      Path: "/"
#      Policies:
#      - PolicyName: LambdaFunctionPolicy
#        PolicyDocument:
#          Version: '2012-10-17'
#          Statement:
#          - Effect: Allow
#            Action:
#              - logs:CreateLogGroup
#              - logs:CreateLogStream
#              - logs:PutLogEvents
#            Resource: '*'
#  LambdaFunctionLogGroup:
#    Type: AWS::Logs::LogGroup
#    DependsOn: LambdaFunction
#    Properties:
#      RetentionInDays: 1
#      LogGroupName: !Join
#        - ""
#        - -  "/aws/lambda/"
#          - !Ref LambdaFunction
#  LambdaFunction:
#    Type: AWS::Lambda::Function
#    Properties:
#      Runtime: python3.9
#      Timeout: 5
#      Handler: index.handler
#      Role: !GetAtt LambdaFunctionRole.Arn
#      Code:
#        ZipFile:
#          !Sub
#            - |-
#              #!/usr/bin/env python3
#              import logging
#              import traceback
#              LOGGER = logging.getLogger()
#              LOGGER.setLevel(logging.INFO)
#              def handler(event, context):
#                try:
#                  LOGGER.info('Event structure: %s', event)
#                  response = {
#                    'event': event
#                  }
#                  return {
#                    'statusCode': 200,
#                    'response': response
#                  }
#                except Exception as e:
#                  LOGGER.error(e)
#                  traceback.print_exc()
#            -
#             lambda_function_role_arn: !Ref LambdaFunctionRole
Outputs:
  LambdaFunctionName:
    Value: !Ref LambdaFunction